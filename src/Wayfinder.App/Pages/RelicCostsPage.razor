@page "/relic-costs"

@using MudBlazor
@using Wayfinder.Services.Relics;
@using Wayfinder.App.Components;

@inherits MudComponentBase

<MudCard>
    <MudCardHeader Class="mud-theme-primary">
        <MudText>Relic Costs</MudText>
    </MudCardHeader>

    <MudCardActions>
        <MudSelect Label="From" T="int" @bind-Value="@_startRelic" @bind-Value:after="@(() => OnStartRelicChanged())" Variant="Variant.Outlined" Class="pr-2">
            @for (int i = 0; i < RelicCosts.Count; i++)
            {
                <MudSelectItem Value="@(i)" />
            }
        </MudSelect>
        <MudSelect Label="To" T="int" @bind-Value="@_endRelic" @bind-Value:after="@(() => OnEndRelicChanged())" Variant="Variant.Outlined">
            @for (int i = 1; i <= RelicCosts.Count; i++)
            {
                <MudSelectItem Value="@(i)" />
            }
        </MudSelect>
    </MudCardActions>

    <MudCardContent>
        <MudText>Costs for R@(_startRelic) to R@(_endRelic):</MudText>
        <RelicCostRow RelicCost="@_calculatedRelicCosts" />
    </MudCardContent>

</MudCard>

@code {
    private List<RelicCost> RelicCosts { get; set; } = null!;

    private int _startRelic = 0;
    private int _endRelic = 5;
    private RelicCost _calculatedRelicCosts = new();

    protected override void OnInitialized()
    {
        RelicCosts = RelicService.GetRelicCosts();
        CalculateRelicCosts();
        base.OnInitialized();
    }

    private void OnStartRelicChanged()
    {
        if (_startRelic >= _endRelic)
        {
            _endRelic = _startRelic + 1;
        }

        CalculateRelicCosts();
    }

    private void OnEndRelicChanged()
    {
        if (_endRelic <= _startRelic)
        {
            _startRelic = _endRelic - 1;
        }

        CalculateRelicCosts();
    }

    private void CalculateRelicCosts()
    {
        var tempRelicCosts = new RelicCost();
        foreach (var relicCost in RelicCosts.Skip(_startRelic).Take(_endRelic - _startRelic))
        {
            tempRelicCosts += relicCost;
        }

        _calculatedRelicCosts = tempRelicCosts;
    }
}
